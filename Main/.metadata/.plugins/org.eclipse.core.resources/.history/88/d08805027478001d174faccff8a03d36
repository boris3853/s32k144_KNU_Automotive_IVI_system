#include "device_registers.h"
#include "clocks_and_modes.h"
#include "lcd1602A.h"
#include <stdio.h>

int lpit0_ch0_flag_counter = 0; /*< LPIT0 timeout counter */
unsigned int j = 0; 			/*FND select pin index */
unsigned int Delaytime = 0; 	/* Delay Time Setting Variable*/
unsigned int External_PIN=0; /* External_PIN:SW External input Assignment */

// test
unsigned int state_ = 0;

// speed, angle
int speed = 0;
int angle = 0;
int mode = 4;
int servoM[7] = {150, 1000, 2000, 3100, 4000, 5000, 6000};

// 7SEG 관련 변수
unsigned int num,num0,num1 = 0;
unsigned int FND_SEL[2]={ 0x002,0x001 };
unsigned int FND_DATA[10] =
{ 0x53C, 0x018, 0x92C, 0x83C, 0xC18, 0xC34, 0xD34, 0x41C, 0xD3C, 0xC1C };
unsigned int CLEAR_SEL = 0x003, CLEAR_DATA = 0xD3C;

// LCD 관련 변수
unsigned int IsMenuPrinted = 0;		// LCD 출력 여부 (0: 출력 X 1: 출력O)
unsigned int MenuST = 0;	// LCD 미뉴 선정

// DHT11 관련 함수, 변수
void get_dht11();
void request();
int response();
uint8_t receive_data();
uint8_t DHT11_data = 0,hum_int,hum_dec,tem_int,tem_dec,parity;


void LPIT0_init (uint32_t delay){
    uint32_t timeout;
    /*!
     * LPIT Clocking:
     * ==============================
     */
   PCC->PCCn[PCC_LPIT_INDEX] = PCC_PCCn_PCS(6);    /* Clock Src = 6 (SPLL2_DIV2_CLK)*/
   PCC->PCCn[PCC_LPIT_INDEX] |= PCC_PCCn_CGC_MASK; /* Enable clk to LPIT0 regs       */

   /*!
    * LPIT Initialization:
    */
   LPIT0->MCR |= LPIT_MCR_M_CEN_MASK;
   /* DBG_EN-0: Timer chans stop in Debug mode */
   /* DOZE_EN=0: Timer chans are stopped in DOZE mode */
   /* SW_RST=0: SW reset does not reset timer chans, regs */
   /* M_CEN=1: enable module clk (allows writing other LPIT0 regs) */

   timeout=delay * 40;
   LPIT0->TMR[0].TVAL = timeout;      /* Chan 0 Timeout period: 40M clocks */
   LPIT0->TMR[0].TCTRL |= LPIT_TMR_TCTRL_T_EN_MASK;
   /* T_EN=1: Timer channel is enabled */
   /* CHAIN=0: channel chaining is disabled */
   /* MODE=0: 32 periodic counter mode */
   /* TSOT=0: Timer decrements immediately based on restart */
   /* TSOI=0: Timer does not stop after timeout */
   /* TROT=0 Timer will not reload on trigger */
   /* TRG_SRC=0: External trigger soruce */
   /* TRG_SEL=0: Timer chan 0 trigger source is selected*/
}

void WDOG_disable (void){
	WDOG->CNT=0xD928C520;     /* Unlock watchdog */
	WDOG->TOVAL=0x0000FFFF;   /* Maximum timeout value */
	WDOG->CS = 0x00002100;    /* Disable watchdog */
}


void delay_ms (uint32_t ms){
	LPIT0_init(ms * 1000);           /* Initialize PIT0 for delay time, timeout  */
    while (0 == (LPIT0->MSR & LPIT_MSR_TIF0_MASK)) {} /* Wait for LPIT0 CH0 Flag */
    lpit0_ch0_flag_counter++;         /* Increment LPIT0 timeout counter */
    LPIT0->MSR |= LPIT_MSR_TIF0_MASK; /* Clear LPIT0 timer flag 0 */
}

void delay_us (uint32_t us){
	LPIT0_init(us);           /* Initialize PIT0 for delay time, timeout  */
    while (0 == (LPIT0->MSR & LPIT_MSR_TIF0_MASK)) {} /* Wait for LPIT0 CH0 Flag */
    lpit0_ch0_flag_counter++;         /* Increment LPIT0 timeout counter */
    LPIT0->MSR |= LPIT_MSR_TIF0_MASK; /* Clear LPIT0 timer flag 0 */
}

void FTM_init (void){

	//FTM0 clocking
	PCC->PCCn[PCC_FTM0_INDEX] &= ~PCC_PCCn_CGC_MASK;		//Ensure clk diabled for config
	PCC->PCCn[PCC_FTM0_INDEX] |= PCC_PCCn_PCS(0b010)		//Clocksrc=1, 8MHz SIRCDIV1_CLK
								| PCC_PCCn_CGC_MASK;		//Enable clock for FTM regs

//FTM0 Initialization
	FTM0->SC = FTM_SC_PWMEN1_MASK							//Enable PWM channel 1output
			| FTM_SC_PWMEN2_MASK | FTM_SC_PWMEN3_MASK
				|FTM_SC_PS(1);								//TOIE(timer overflow Interrupt Ena) = 0 (deafault)
															//CPWMS(Center aligned PWM Select) =0 (default, up count)
															/* CLKS (Clock source) = 0 (default, no clock; FTM disabled) 	*/
															/* PS (Prescaler factor) = 1. Prescaler = 2 					*/

	FTM0->MOD = 8000-1;									//FTM0 counter final value (used for PWM mode)
															// FTM0 Period = MOD-CNTIN+0x0001~=16000 ctr clks=8ms
															//8Mhz /2 =4MHz
	FTM0->CNTIN = FTM_CNTIN_INIT(0);


	FTM0->CONTROLS[1].CnSC |=FTM_CnSC_MSB_MASK;
	FTM0->CONTROLS[1].CnSC |=FTM_CnSC_ELSA_MASK;			/* FTM0 ch1: edge-aligned PWM, low true pulses 		*/
															/* CHIE (Chan Interrupt Ena) = 0 (default) 			*/
															/* MSB:MSA (chan Mode Select)=0b10, Edge Align PWM		*/
															/* ELSB:ELSA (chan Edge/Level Select)=0b10, low true 	*/

	FTM0->CONTROLS[2].CnSC |=FTM_CnSC_MSB_MASK;
	FTM0->CONTROLS[2].CnSC |=FTM_CnSC_ELSA_MASK;
	FTM0->CONTROLS[3].CnSC |=FTM_CnSC_MSB_MASK;
	FTM0->CONTROLS[3].CnSC |=FTM_CnSC_ELSA_MASK;

	FTM0->SC|=FTM_SC_CLKS(3);
}

void FTM0_CH1_PWM (int i){//uint32_t i){
	FTM0->CONTROLS[1].CnV = i;//8000~0 duty; ex(7200=> Duty 0.1 / 800=>Duty 0.9)
	//start FTM0 counter with clk source = external clock (SOSCDIV1_CLK)
	FTM0->SC|=FTM_SC_CLKS(3);
}

void SERVO_init (void)
{
	/*!
	 * Pins definitions
	 * ===================================================
	 *
	 * Pin number        | Function
	 * ----------------- |------------------
	 * PTD16			 | FTM0CH1
	 */
  PCC->PCCn[PCC_PORTD_INDEX] |= PCC_PCCn_CGC_MASK;   /* Enable clock for PORTD */
  PORTD->PCR[16] |= PORT_PCR_MUX(2);           		/* Port D16: MUX = ALT2, FTM0CH1 */
}

void DC_init(void)
{
	 /*
	 * Pins definitions
	 * ===================================================
	 *
	 * Pin number        | Function
	 * ----------------- |------------------
	 * PTD0		     	 | FTM0CH2
	 * PTD1			     | FTM0CH3
	 */
 PCC->PCCn[PCC_PORTD_INDEX ]|=PCC_PCCn_CGC_MASK;   /* Enable clock for PORTD */
 PORTD->PCR[0]|=PORT_PCR_MUX(2);           		/* Port D16: MUX = ALT2, FTM0CH1 */
 PORTD->PCR[1]|=PORT_PCR_MUX(2);           		/* Port D16: MUX = ALT2, FTM0CH3 */
}

void GPIO_PORT_INIT()
{
    // GPIO PCC 설정 - CGC 마스킹
    PCC->PCCn[PCC_PORTA_INDEX] |= PCC_PCCn_CGC_MASK;

    /* GPIOA PDDR 설정
    // INPUT: PA6 PA7 PA8 PA9
    // OUTPUT: PA11 PA12 PA13 PA14
    */
    PTA->PDDR &= ~((1<<6)|(1<<7)|(1<<8)|(1<<9));
    PTA->PDDR |= (1<<11)|(1<<12)|(1<<13)|(1<<14);

    // PORTA: PA6 PA7 PA8 PA9 MUX IRQC Setting
    // 			PA11 PA12 PA13 MUX Setting
    PORTA->PCR[6] |= PORT_PCR_MUX(1) | PORT_PCR_IRQC(10);
    PORTA->PCR[7] |= PORT_PCR_MUX(1) | PORT_PCR_IRQC(10);
    PORTA->PCR[8] |= PORT_PCR_MUX(1) | PORT_PCR_IRQC(10);
    PORTA->PCR[9] |= PORT_PCR_MUX(1) | PORT_PCR_IRQC(10);
    PORTA->PCR[11] |= PORT_PCR_MUX(1);
    PORTA->PCR[12] |= PORT_PCR_MUX(1);
    PORTA->PCR[13] |= PORT_PCR_MUX(1);
    PORTA->PCR[14] |= PORT_PCR_MUX(1);
}

void LCD_PORT_init (void)
{
	 /*
   * ===============PORT-D SEGMENT=====================
   */

	//=========================================
	//port D 15, 14, 13 - RS, RW, ENABLE
	//port D 12, 11, 10, 9 - Transmission port(DB7, 6, 5, 4)
	//=========================================

	//PTD->PDDR |= 0xFE00;
    PTD->PDDR |= 1<<9 | 1<<10 | 1<<11 | 1<<12 | 1<<13 | 1<<14 | 1<<15;

	PCC->PCCn[PCC_PORTD_INDEX] &= ~PCC_PCCn_CGC_MASK;
	PCC->PCCn[PCC_PORTD_INDEX] |= PCC_PCCn_PCS(0x001);
	PCC->PCCn[PCC_PORTD_INDEX] |= PCC_PCCn_CGC_MASK;
	PCC->PCCn[PCC_FTM2_INDEX]  &= ~PCC_PCCn_CGC_MASK;
	PCC->PCCn[PCC_FTM2_INDEX]  |= (PCC_PCCn_PCS(1)| PCC_PCCn_CGC_MASK);		//Clock = 80MHz



    //Pin mux
    PORTD->PCR[9]= PORT_PCR_MUX(1);
    PORTD->PCR[10]= PORT_PCR_MUX(1);
    PORTD->PCR[11]= PORT_PCR_MUX(1);
    PORTD->PCR[12]= PORT_PCR_MUX(1);
    PORTD->PCR[13]= PORT_PCR_MUX(1);
    PORTD->PCR[14]= PORT_PCR_MUX(1);
    PORTD->PCR[15]= PORT_PCR_MUX(1);

    //Output set(set 4bit, 2line - 0b 0010 0101 000x xxxx)

}

/*
void DHT_PORT_init (void)
{
    PTD->PDDR |= 1 << 3;

    //Pin mux
    PORTD->PCR[9]= PORT_PCR_MUX(1);
}
*/

void KEYPAD_init (void)
{
	PCC-> PCCn[PCC_PORTE_INDEX] = PCC_PCCn_CGC_MASK;
	PTE->PDDR |= (1<<1)|(1<<2)|(1<<3);
	PTE->PDDR &= ~((1<<6)|(1<<7)|(1<<8)|(1<<9));

	PORTE->PCR[6] = PORT_PCR_MUX(1)|PORT_PCR_PFE_MASK|PORT_PCR_PE(1) | PORT_PCR_PS(0);
	PORTE->PCR[7] = PORT_PCR_MUX(1)|PORT_PCR_PFE_MASK|PORT_PCR_PE(1) | PORT_PCR_PS(0);
	PORTE->PCR[8] = PORT_PCR_MUX(1)|PORT_PCR_PFE_MASK|PORT_PCR_PE(1) | PORT_PCR_PS(0);
	PORTE->PCR[9] = PORT_PCR_MUX(1)|PORT_PCR_PFE_MASK|PORT_PCR_PE(1) | PORT_PCR_PS(0);

	PORTE->PCR[1]  = PORT_PCR_MUX(1);
	PORTE->PCR[2]  = PORT_PCR_MUX(1);
	PORTE->PCR[3]  = PORT_PCR_MUX(1);
}

int Kbuff;
int KeyScan(void){
   int Dtime = 1000;
   Kbuff = -1;

   PTE->PSOR |= (1<<1);
   delay_us(Dtime);
   if(PTE->PDIR &(1<<6))Kbuff=1;      //1
   if(PTE->PDIR &(1<<7))Kbuff=4;      //4
   if(PTE->PDIR &(1<<8))Kbuff=7;      //7
   if(PTE->PDIR &(1<<9))Kbuff=11;     //*
   PTE->PCOR |= (1<<1);

   PTE->PSOR |= (1<<2);
   delay_us(Dtime);
   if(PTE->PDIR & (1<<6))Kbuff=2;      //2
   if(PTE->PDIR & (1<<7))Kbuff=5;      //5
   if(PTE->PDIR & (1<<8))Kbuff=8;      //8
   if(PTE->PDIR & (1<<9))Kbuff=0;      //0
   PTE->PCOR |= (1<<2);

   PTE->PSOR |= (1<<3);
   delay_us(Dtime);
   if(PTE->PDIR & (1<<6))Kbuff=3;      //3
   if(PTE->PDIR & (1<<7))Kbuff=6;      //6
   if(PTE->PDIR & (1<<8))Kbuff=9;      //9
   if(PTE->PDIR & (1<<9))Kbuff=12;    //#
   PTE->PCOR |= (1<<3);

   return Kbuff;
}


void SEG_PORT_INIT()
{
	// 7SEG PCC 설정 - CGC 마스킹
    PCC->PCCn[PCC_PORTB_INDEX] |= PCC_PCCn_CGC_MASK;

    /* 7SEG PDDR 설정
    // OUTPUT: PB0 PB1 PB2 PB3 PB4 PB5 PB8 PB10 PB10
    */
    PTB->PDDR |= (1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|
    			 (1<<5)|(1<<8)|(1<<10)|(1<<11);

    // PORTB: PB0 PB1 PB2 PB3 PB4 PB5 PB8 PB10 PB11 MUX 설정
    PORTB->PCR[0] |= PORT_PCR_MUX(1);
    PORTB->PCR[1] |= PORT_PCR_MUX(1);
    PORTB->PCR[2] |= PORT_PCR_MUX(1);
    PORTB->PCR[3] |= PORT_PCR_MUX(1);
    PORTB->PCR[4] |= PORT_PCR_MUX(1);
    PORTB->PCR[5] |= PORT_PCR_MUX(1);
	PORTB->PCR[8] |= PORT_PCR_MUX(1);
	PORTB->PCR[10] |= PORT_PCR_MUX(1);
	PORTB->PCR[11] |= PORT_PCR_MUX(1);
}

void Seg_out(int number){
	Delaytime = 1;

	num1=(number/10)%10;
	num0= number%10;

	// 10자리수 출력
	PTB->PSOR = FND_SEL[j];
	PTB->PSOR = FND_DATA[num1];
	delay_ms(Delaytime);
	PTB->PCOR = CLEAR_SEL;
	PTB->PCOR = CLEAR_DATA;
	j++;

	// 1자리수 출력
	PTB->PSOR = FND_SEL[j];
	PTB->PSOR = FND_DATA[num0];
	delay_ms(Delaytime);
	PTB->PCOR = CLEAR_SEL;
	PTB->PCOR = CLEAR_DATA;
	j=0;
}


void NVIC_init_IRQs(void){
	S32_NVIC->ICPR[1] |= 1<<(59%32); // Clear any pending IRQ59
	S32_NVIC->ISER[1] |= 1<<(59%32); // Enable IRQ59
	S32_NVIC->IP[59] = 0xB; //Priority 11 of 15
}

void PORTA_IRQHandler(void){
	PORTA->PCR[6] &= ~(0x01000000); // Port Control Register ISF bit '0' set
	PORTA->PCR[7] &= ~(0x01000000); // Port Control Register ISF bit '0' set
	PORTA->PCR[8] &= ~(0x01000000); // Port Control Register ISF bit '0' set
	PORTA->PCR[9] &= ~(0x01000000); // Port Control Register ISF bit '0' set

	//PORTA_Interrupt State Flag Register Read
	if((PORTA->ISFR & (1<<6)) != 0){
		External_PIN=1;
	}
	else if((PORTA->ISFR & (1<<7)) != 0){
		External_PIN=2;
	}
	else if((PORTA->ISFR & (1<<8)) != 0){
		External_PIN=3;
	}
	else if((PORTA->ISFR & (1<<9)) != 0){
		External_PIN=4;
	}

	// External input Check Behavior Assignment
	switch (External_PIN){
		case 1:
			//num = 11;

			// 다음 Menu
			MenuST = (MenuST + 1) % 4;
			IsMenuPrinted = 0;

			External_PIN=0;
			break;
		case 2:
			//num = 22;

			// 이전 메뉴
			MenuST = (MenuST + 3) % 4;
			IsMenuPrinted = 0;

			External_PIN=0;
			break;
		case 3:
			//num = 33;
			External_PIN=0;
			break;
		case 4:
//			num = 44;
			External_PIN=0;
			break;
		default:
			break;
	}

	PORTA->PCR[6] |= 0x01000000; // Port Control Register ISF bit '1' set
	PORTA->PCR[7] |= 0x01000000; // Port Control Register ISF bit '1' set
	PORTA->PCR[8] |= 0x01000000; // Port Control Register ISF bit '1' set
	PORTA->PCR[9] |= 0x01000000; // Port Control Register ISF bit '1' set
}

void LCD_PRINT(char *line1, char *line2) {
   lcdinput(0x01);
   delay_ms(200);

   lcdinput(0x80);
   delay_ms(200);
   int i = 0;
   //text-char output
   while (line1[i] != '\0') {
      lcdcharinput(line1[i]); // 1(first) row text-char send to LCD module
      delay_ms(5);
      i++;

   }

   lcdinput(0x80 + 0x40); // second row
   delay_ms(200);
   i = 0;
   while (line2[i] != '\0') {
      lcdcharinput(line2[i]); // 2(second) row text-char send to LCD module
      delay_ms(5);
      i++;
   }

   delay_ms(800);
}

char t1 = 1 + '0';
char t2 = 2 + '0';

// HUMID:
char msg_H[15]={0x48, 0x55, 0x4D, 0x49,
			0x44, 0x3A, 0x20, '0', '0', 0x25};// 1 row text-char

// TEMP:
char msg_T[15]={0x54, 0x45, 0x4D, 0x50,
			0x3A, 0x20, '0', '0', 0x27};// 1 row text-char

// VELOCITY:
char msg_V[15]={0x56, 0x45, 0x4C, 0x4F,
    			0x43, 0x49, 0x54, 0x59,
				0x3A, 0x20, '0', '0',
				0x6D, 0x2F, 0x73};// 1 row text-char

// ANGLE: MODE
char msg_A[15]={0x41, 0x4E, 0x47, 0x4C,
    			0x45, 0x3A, 0x20, 0x4D,
				0x4F, 0x44, 0x45, 0x20,
				0x20};// 1 row text-char

// WELCOME TO
char msg_MN1[15]={0x57, 0x45, 0x4C, 0x43,
    		      0x4F, 0x4D, 0x45, 0x20,
				  0x54, 0x4F};

// DRIVE DASHBOARD
char msg_MN2[15]={0x44, 0x52, 0x49, 0x56,
		 	 	  0x45, 0x20, 0x44, 0x41,
				  0x53, 0x48, 0x42, 0x4F,
     			  0x41, 0x52, 0x44};

// CONTRIBUTION
char msg_IN1[15]={0x43, 0x4F, 0x4E, 0x54,
				  0x52, 0x49, 0x42, 0x55,
				  0x54, 0x49, 0x4F, 0x4E};

// KYUNG&LEE
char msg_IN2[15]={0x4B, 0x59, 0x55, 0x4E,
				  0x47, 0x26, 0x4C, 0x45,
				  0x45};

uint8_t num_t1, num_t2, num_t3, num_t4;

void MenuSEL(int menu)
{
	switch(menu)
	{
		case 0:
			LCD_PRINT(msg_MN1, msg_MN2);
			break;
		case 1:
//			num_t1 = hum_int;
//			num_t2 = hum_dec;
//			num_t3 = tem_int;
//			num_t4 = tem_dec;

			num_t1 = 1;
			num_t2 = 2;
			num_t3 = 3;
			num_t4 = 4;


			msg_H[7] = num_t1 + '0';
			msg_H[8] = num_t2 + '0';
			msg_T[6] = num_t3 + '0';
			msg_T[7] = num_t4 + '0';
			LCD_PRINT(msg_H, msg_T);
			break;
		case 2:
			num_t1 = (speed / 10) % 10;
			num_t2 = speed % 10;

			msg_V[10] = num_t1 + '0';
			msg_V[11] = num_t2 + '0';
			msg_A[12] = mode + '0';
			LCD_PRINT(msg_V, msg_A);
			break;
		case 3:
			LCD_PRINT(msg_IN1, msg_IN2);
			break;
		default:
			break;
	}

	IsMenuPrinted = 1;
}


/*
#define DNUM 3

void request()
{
	PTD->PDDR |= 1<<DNUM;		// output mode
	PTD->PCOR |= 1<<DNUM;   	// low
	delay_ms(50);				//more than 18ms
//	delay_ms(20);				//more than 18ms
	PTD->PSOR |= 1<<DNUM;		// high
}

int response()
{
	PTD->PDDR &= ~(1<<DNUM);		// input mode
//	delay_us(39);					//pulled wait 20~40us
	delay_us(59);					//pulled wait 20~40us
	while(PTD->PDIR & (1<<DNUM));		//response signal check

	delay_us(80);					//wait 80us
	if(!(PTD->PDIR & (1<<DNUM)))	//pulled ready output check
		return 1;

	delay_us(80);					//wait 80us
	return 0;
}

uint8_t receive_data()
{
	for (int i=0; i<8; i++)
	{
		while((PTD->PDIR & (1<<DNUM)) == 0); 	//50us signal wait
//		delay_us(30);
		delay_us(35);

		if(PTD->PDIR & (1<<DNUM))				//greater than 30ms -> HIGH
			DHT11_data = (DHT11_data<<1)|(0x01);
		else						//less than 30ms -> LOW
			DHT11_data = (DHT11_data<<1);

		while(PTD->PDIR & (1<<DNUM));
	}
	return DHT11_data;
}

void get_dht11()
{
	request();						//Host send a start signal
	if(response() != 1)				//DHT11 response
	{
		hum_int = receive_data();	//Humidity integer
		hum_dec = receive_data();	//Humidity decimal
		tem_int = receive_data();	//Temporature integer
		tem_dec = receive_data();	//Temporature decimal
		parity = receive_data();	//parity

		// ERROR OCCUR: LED ON
		if(((uint8_t)(hum_int + hum_dec + tem_int + tem_dec)) != parity)
			PTA->PCOR |= (1<<14);
		// NO ERROR: LED OFF
		else
			PTA->PSOR |= (1<<14);
	}
}

void TEST()
{
	if(!(PTA->PDIR & (1<<6)))
	    PTA->PCOR |= (1<<11);
	else
	    PTA->PSOR |= (1<<11);

	if(!(PTA->PDIR & (1<<7)))
		PTA->PCOR |= (1<<12);
	else
	    PTA->PSOR |= (1<<12);

    if(!(PTA->PDIR & (1<<8)))
        PTA->PCOR |= (1<<13);
    else
        PTA->PSOR |= (1<<13);

	if(state_ == 1)
	{
		PTA->PCOR |= (1<<11);
		PTA->PSOR |= (1<<12);
		PTA->PSOR |= (1<<13);
	}else if(state_ == 2)
	{
		PTA->PSOR |= (1<<11);
		PTA->PCOR |= (1<<12);
		PTA->PSOR |= (1<<13);
	}else if(state_ == 3)
	{
		PTA->PSOR |= (1<<11);
		PTA->PSOR |= (1<<12);
		PTA->PCOR |= (1<<13);
	}
}

void TEST2()
{
	PTC->PCOR |= (1<<0);
	PTC->PCOR |= (1<<1);
	PTC->PCOR |= (1<<2);
}
*/

int D = 7200;

// test
int main(void){
	WDOG_disable();        /* Disable WatchDogs*/
	SOSC_init_8MHz();      /* Initialize system oscilator for 8 MHz xtal */
	SPLL_init_160MHz();    /* Initialize SPLL to 160 MHz with 8 MHz SOSC */
	NormalRUNmode_80MHz(); /* Init clocks: 80 MHz sysclk & core, 40 MHz bus, 20 MHz flash */
	FTM_init();
	SystemCoreClockUpdate();
	NVIC_init_IRQs();


    GPIO_PORT_INIT();
    SEG_PORT_INIT();
    LCD_PORT_init();
//    DHT_PORT_init();
    KEYPAD_init();
    SERVO_init();

    delay_ms(20);


    lcdinit();        // Initialize LCD1602A module
    delay_ms(200);

    // LED OFF
    for(int i=11;i<15;++i)
    	PTA->PSOR |= (1<<i);

    while(1)
    {
        //TEST2();
    	if(!IsMenuPrinted) MenuSEL(MenuST);
//    	get_dht11();
//    	PTA->PCOR |= (1<<14);
//    	PTA->PSOR |= (1<<13);
//    	PTA->PCOR |= (1<<12);
//    	PTA->PSOR |= (1<<11);
//    	if()

    	Kbuff = KeyScan();

    	switch(Kbuff)
    	{
    		case 1: //angle 증가
    			if(angle < 70) angle++;
    			break;
    		case 3: // angle 감소
    			if(angle > -70) angle--;
    			break;
    		case 5:	// speed 증가
    			if(speed < 90) speed++;
    			if(D < 7200) D += 900;
    			break;
    		case 2:	// speed 감소
    			if(speed > 0) speed--;
    			if(D > 0) D -= 900;
    			break;
     	}

    	if(angle > 50 && angle <= 70)
    		mode = 7;
    	else if(angle > 30 && angle <= 50)
    		mode = 6;
    	else if(angle > 10 && angle <= 30)
    		mode = 5;
    	else if(angle > -10 && angle <= 10)
    		mode = 4;
    	else if(angle > -30 && angle <= -10)
    		mode = 3;
    	else if(angle > -50 && angle <= -30)
    		mode = 2;
    	else if(angle >= -70 && angle <= -50)
    		mode = 1;

    	FTM0->COMBINE |= FTM_COMBINE_SYNCEN1_MASK | FTM_COMBINE_COMP1_MASK | FTM_COMBINE_DTEN1_MASK;

    	FTM0->CONTROLS[2].CnV=FTM_CnV_VAL(0); //8000~0 duty; ex(7200=> Duty 0.1 / 800=>Duty 0.9)
    	FTM0->CONTROLS[3].CnV=FTM_CnV_VAL(0); //8000~0 duty; ex(7200=> Duty 0.1 / 800=>Duty 0.9)
//    	FTM0_CH1_PWM(1000);

    	Seg_out(speed);
    }
}
