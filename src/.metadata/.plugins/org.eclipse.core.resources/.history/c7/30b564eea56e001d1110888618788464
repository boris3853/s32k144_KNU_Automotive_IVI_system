/*
 * main implementation: use this 'C' sample to create your own application
 *
 */

 // 레지스터값 설정
#define PORTD_PCR0 *((volatile unsigned*)(PORTD_BASE+0x00))
#define PORTD_PCR1 *((volatile unsigned*)(PORTD_BASE+0x04))
#define PORTD_PCR2 *((volatile unsigned*)(PORTD_BASE+0x08))
#define PORTD_PCR3 *((volatile unsigned*)(PORTD_BASE+0x0C))
#define PORTD_PCR6 *((volatile unsigned*)(PORTD_BASE+0x18))

#define PORTE_PCR1 *((volatile unsigned*)(PORTE_BASE+0x04))
#define PORTE_PCR13 *((volatile unsigned*)(PORTE_BASE+0x34))
#define PORTE_PCR14 *((volatile unsigned*)(PORTE_BASE+0x38))
#define PORTE_PCR15 *((volatile unsigned*)(PORTE_BASE+0x3C))
#define PORTE_PCR16 *((volatile unsigned*)(PORTE_BASE+0x40))

#define GPIOD_PDDR *((volatile unsigned*)(PTD_BASE+0x14))
#define GPIOE_PDDR *((volatile unsigned*)(PTE_BASE+0x14))

#define GPIOD_PSOR *((volatile unsigned*)(PTD_BASE+0x04))
#define GPIOD_PCOR *((volatile unsigned*)(PTD_BASE+0x08))
#define GPIOE_PSOR *((volatile unsigned*)(PTE_BASE+0x04))
#define GPIOE_PCOR *((volatile unsigned*)(PTE_BASE+0x08))

#define PCC_PORTD *((volatile unsigned*)(PCC_BASE+0x130))
#define PCC_PORTE *((volatile unsigned*)(PCC_BASE+0x134))

#define GPIOE_PDIR *((volatile unsigned*)(PTE_BASE+0x10))

#include "S32K144.h"

void port_init(void){
	// GPIO PCC 설정 - CGC 마스킹
    PCC_PORTD |= PCC_PCCn_CGC_MASK;
	PCC_PORTE |= PCC_PCCn_CGC_MASK;

    // PORTD: PD0 PD1 PD2 PD3 PD6 MUX 설정
    // PORTE: PE1 PE13 PE14 PE15 PE16 MUX 설정

	PORTD_PCR0 &= ~((0b111)<<PORT_PCR_MUX_SHIFT);
	PORTD_PCR0 |= (1<<PORT_PCR_MUX_SHIFT);

	PORTD_PCR1 &= ~((0b111)<<PORT_PCR_MUX_SHIFT);
	PORTD_PCR1 |= (1<<PORT_PCR_MUX_SHIFT);

	PORTD_PCR2 &= ~((0b111)<<PORT_PCR_MUX_SHIFT);
	PORTD_PCR2 |= (1<<PORT_PCR_MUX_SHIFT);

	PORTD_PCR3 &= ~((0b111)<<PORT_PCR_MUX_SHIFT);
	PORTD_PCR3 |= (1<<PORT_PCR_MUX_SHIFT);

	PORTD_PCR6 &= ~((0b111)<<PORT_PCR_MUX_SHIFT);
	PORTD_PCR6 |= (1<<PORT_PCR_MUX_SHIFT);

	PORTE_PCR1 &= ~((0b111)<<PORT_PCR_MUX_SHIFT);
	PORTE_PCR1 |= (1<<PORT_PCR_MUX_SHIFT);

	PORTE_PCR13 &= ~((0b111)<<PORT_PCR_MUX_SHIFT);
	PORTE_PCR13 |= (1<<PORT_PCR_MUX_SHIFT);

	PORTE_PCR14 &= ~((0b111)<<PORT_PCR_MUX_SHIFT);
	PORTE_PCR14 |= (1<<PORT_PCR_MUX_SHIFT);

	PORTE_PCR15 &= ~((0b111)<<PORT_PCR_MUX_SHIFT);
	PORTE_PCR15 |= (1<<PORT_PCR_MUX_SHIFT);

	PORTE_PCR16 &= ~((0b111)<<PORT_PCR_MUX_SHIFT);
	PORTE_PCR16 |= (1<<PORT_PCR_MUX_SHIFT);

    // GPIO PDDR 설정
	GPIOD_PDDR |= (1<<0) | (1<<1) | (1<<2) | (1<<3) | (1<<6);
	GPIOE_PDDR &= ~((1<<1) | (1<<13) | (1<<14) | (1<<15) | (1<<16));


}
int main(void){
	port_init();

	while(1){
        // 폴링 방식으로 스위치 값 확인

        // 스위치1 값 읽음
		if(GPIOE_PDIR & (1<<1))
			GPIOD_PCOR |= (1<<0);   // 스위치 켜기
		else
			GPIOD_PSOR |= (1<<0);   // 스위치 끄기

        // 스위치2 값 읽음
		if(GPIOE_PDIR & (1<<13))
					GPIOD_PCOR |= (1<<1);
				else
					GPIOD_PSOR |= (1<<1);

        // 스위치3 값 읽음
		if(GPIOE_PDIR & (1<<14))
					GPIOD_PCOR |= (1<<2);
				else
					GPIOD_PSOR |= (1<<2);

        // 스위치4 값 읽음
		if(GPIOE_PDIR & (1<<15))
					GPIOD_PCOR |= (1<<3);
				else
					GPIOD_PSOR |= (1<<3);

        // 스위치5 값 읽음
		if(GPIOE_PDIR & (1<<16))
					GPIOD_PCOR |= (1<<6);
				else
					GPIOD_PSOR |= (1<<6);
	}

}
